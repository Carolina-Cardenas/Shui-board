{
  "version": 3,
  "sources": ["../../../../functions/listMessages/index.mjs"],
  "sourcesContent": ["// import { ScanCommand as d, QueryCommand as p } from \"@aws-sdk/client-dynamodb\";\n// import { DynamoDBClient as u } from \"@aws-sdk/client-dynamodb\";\n// var o = new u({ region: \"eu-north-1\" });\n// var t = (e, r) => ({\n//   statusCode: e,\n//   headers: {\n//     \"Content-Type\": \"application/json\",\n//     \"Access-Control-Allow-Origin\": \"*\",\n//     \"Access-Control-Allow-Credentials\": !0,\n//   },\n//   body: JSON.stringify(r),\n// });\n// var i = (e) => ({\n//     id: e.messageId.S,\n//     username: e.username.S,\n//     text: e.text.S,\n//     createdAt: e.createdAt.S,\n//   }),\n//   w = async (e) => {\n//     try {\n//       let r = e.queryStringParameters || {},\n//         a = r.username,\n//         c = r.sort || \"desc\";\n//       if (a) {\n//         let m = {\n//             TableName: process.env.TABLE_NAME || \"ShuiMessages\",\n//             IndexName: \"userIndex\",\n//             KeyConditionExpression: \"username = :u\",\n//             ExpressionAttributeValues: { \":u\": { S: a } },\n//             ScanIndexForward: c === \"asc\",\n//           },\n//           n = ((await o.send(new p(m))).Items || []).map(i);\n//         return t(200, n);\n//       } else {\n//         let s = (\n//           (\n//             await o.send(\n//               new d({ TableName: process.env.TABLE_NAME || \"ShuiMessages\" })\n//             )\n//           ).Items || []\n//         ).map(i);\n//         return (\n//           s.sort((n, l) => l.createdAt.localeCompare(n.createdAt)),\n//           c === \"asc\" && s.reverse(),\n//           t(200, s)\n//         );\n//       }\n//     } catch (r) {\n//       return (\n//         console.error(\"listMessages error\", r),\n//         t(500, { error: \"Internal error\" })\n//       );\n//     }\n//   };\n// export { w as handler };\nimport {\n  ScanCommand as ScanCmd,\n  QueryCommand as QueryCmd,\n} from \"@aws-sdk/client-dynamodb\";\nimport { DynamoDBClient } from \"@aws-sdk/client-dynamodb\";\n\nconst client = new DynamoDBClient({ region: \"eu-north-1\" });\n\n// Funci\u00F3n para enviar respuesta HTTP\nconst sendResponse = (statusCode, body) => ({\n  statusCode,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"Access-Control-Allow-Origin\": \"*\",\n    \"Access-Control-Allow-Credentials\": true,\n  },\n  body: JSON.stringify(body),\n});\n\n// Transformar item de DynamoDB a objeto legible\nconst formatItem = (item) => ({\n  id: item.messageId.S,\n  username: item.username.S,\n  text: item.text.S,\n  createdAt: item.createdAt.S,\n});\n\n// Funci\u00F3n principal\nexport const handler = async (event) => {\n  try {\n    // \uD83D\uDD0A Imagina que estamos abriendo el carrito para ver qu\u00E9 query llega\n    const queryParams = event.queryStringParameters || {};\n    console.log(\"Query parameters recibidos:\", queryParams);\n\n    const username = queryParams.username?.trim(); // eliminar espacios en blanco\n    const sort = queryParams.sort === \"asc\" ? \"asc\" : \"desc\";\n\n    // Si hay username v\u00E1lido, usar \u00EDndice secundario\n    console.log(\"Username recibido:\", username);\n    if (username) {\n      // \uD83C\uDFF7\uFE0F \"Etiqueta del estante\": username\n      const params = {\n        TableName: process.env.TABLE_NAME || \"ShuiMessages\",\n        IndexName: \"userIndex\",\n        KeyConditionExpression: \"username = :u\",\n        ExpressionAttributeValues: { \":u\": { S: username } },\n        ScanIndexForward: sort === \"asc\", // true = ascendente\n      };\n\n      console.log(\"Query DynamoDB con \u00EDndice userIndex:\", params);\n\n      const result = await client.send(new QueryCmd(params));\n      const items = (result.Items || []).map(formatItem);\n\n      // \uD83C\uDFA8 Asociaci\u00F3n visual: ordenar los mensajes como si fueran post-its en el tablero\n      return sendResponse(200, items);\n    } else {\n      // Si no hay username, hacemos un scan general\n      console.log(\"No se envi\u00F3 username v\u00E1lido \u2192 haciendo scan completo\");\n\n      const result = await client.send(\n        new ScanCmd({ TableName: process.env.TABLE_NAME || \"ShuiMessages\" })\n      );\n\n      let items = (result.Items || []).map(formatItem);\n\n      // Orden descendente por defecto\n      items.sort((a, b) => b.createdAt.localeCompare(a.createdAt));\n      if (sort === \"asc\") items.reverse();\n\n      return sendResponse(200, items);\n    }\n  } catch (error) {\n    console.error(\"listMessages error:\", error);\n    // \uD83D\uDD0A Nemotecnia auditiva: DynamoDB grita \u201C500 Internal Error\u201D si no puede procesar tu carrito\n    return sendResponse(500, { error: \"Internal error\" });\n  }\n};\n"],
  "mappings": "AAuDA,OACE,eAAeA,EACf,gBAAgBC,MACX,2BACP,OAAS,kBAAAC,MAAsB,2BAE/B,IAAMC,EAAS,IAAID,EAAe,CAAE,OAAQ,YAAa,CAAC,EAGpDE,EAAe,CAACC,EAAYC,KAAU,CAC1C,WAAAD,EACA,QAAS,CACP,eAAgB,mBAChB,8BAA+B,IAC/B,mCAAoC,EACtC,EACA,KAAM,KAAK,UAAUC,CAAI,CAC3B,GAGMC,EAAcC,IAAU,CAC5B,GAAIA,EAAK,UAAU,EACnB,SAAUA,EAAK,SAAS,EACxB,KAAMA,EAAK,KAAK,EAChB,UAAWA,EAAK,UAAU,CAC5B,GAGaC,EAAU,MAAOC,GAAU,CACtC,GAAI,CAEF,IAAMC,EAAcD,EAAM,uBAAyB,CAAC,EACpD,QAAQ,IAAI,8BAA+BC,CAAW,EAEtD,IAAMC,EAAWD,EAAY,UAAU,KAAK,EACtCE,EAAOF,EAAY,OAAS,MAAQ,MAAQ,OAIlD,GADA,QAAQ,IAAI,qBAAsBC,CAAQ,EACtCA,EAAU,CAEZ,IAAME,EAAS,CACb,UAAW,QAAQ,IAAI,YAAc,eACrC,UAAW,YACX,uBAAwB,gBACxB,0BAA2B,CAAE,KAAM,CAAE,EAAGF,CAAS,CAAE,EACnD,iBAAkBC,IAAS,KAC7B,EAEA,QAAQ,IAAI,0CAAwCC,CAAM,EAG1D,IAAMC,IADS,MAAMZ,EAAO,KAAK,IAAIF,EAASa,CAAM,CAAC,GAC/B,OAAS,CAAC,GAAG,IAAIP,CAAU,EAGjD,OAAOH,EAAa,IAAKW,CAAK,CAChC,KAAO,CAEL,QAAQ,IAAI,iEAAsD,EAMlE,IAAIA,IAJW,MAAMZ,EAAO,KAC1B,IAAIH,EAAQ,CAAE,UAAW,QAAQ,IAAI,YAAc,cAAe,CAAC,CACrE,GAEoB,OAAS,CAAC,GAAG,IAAIO,CAAU,EAG/C,OAAAQ,EAAM,KAAK,CAACC,EAAGC,IAAMA,EAAE,UAAU,cAAcD,EAAE,SAAS,CAAC,EACvDH,IAAS,OAAOE,EAAM,QAAQ,EAE3BX,EAAa,IAAKW,CAAK,CAChC,CACF,OAASG,EAAO,CACd,eAAQ,MAAM,sBAAuBA,CAAK,EAEnCd,EAAa,IAAK,CAAE,MAAO,gBAAiB,CAAC,CACtD,CACF",
  "names": ["ScanCmd", "QueryCmd", "DynamoDBClient", "client", "sendResponse", "statusCode", "body", "formatItem", "item", "handler", "event", "queryParams", "username", "sort", "params", "items", "a", "b", "error"]
}
