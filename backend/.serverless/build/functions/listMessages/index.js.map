{
  "version": 3,
  "sources": ["../../../../functions/listMessages/index.mjs", "../../../../services/db.mjs", "../../../../utils/responses.mjs"],
  "sourcesContent": ["import { ScanCommand, QueryCommand } from \"@aws-sdk/client-dynamodb\";\nimport { client } from \"../../services/db.mjs\";\nimport { sendResponse } from \"../../utils/responses.mjs\";\n\nconst mapItem = (it) => ({\n  id: it.messageId.S,\n  username: it.username.S,\n  text: it.text.S,\n  createdAt: it.createdAt.S,\n});\n\nexport const handler = async (event) => {\n  try {\n    const qp = event.queryStringParameters || {};\n    const username = qp.username;\n    const sort = qp.sort || \"desc\";\n\n    if (username) {\n      const params = {\n        TableName: process.env.TABLE_NAME || \"ShuiMessages\",\n        IndexName: \"ByUserIndex\",\n        KeyConditionExpression: \"username = :u\",\n        ExpressionAttributeValues: {\n          \":u\": { S: username },\n        },\n        ScanIndexForward: sort === \"asc\",\n      };\n      const result = await client.send(new QueryCommand(params));\n      const items = (result.Items || []).map(mapItem);\n      return sendResponse(200, items);\n    } else {\n      const result = await client.send(\n        new ScanCommand({\n          TableName: process.env.TABLE_NAME || \"ShuiMessages\",\n        })\n      );\n      let items = (result.Items || []).map(mapItem);\n      items.sort((a, b) => b.createdAt.localeCompare(a.createdAt));\n      if (sort === \"asc\") items.reverse();\n      return sendResponse(200, items);\n    }\n  } catch (err) {\n    console.error(\"listMessages error\", err);\n    return sendResponse(500, { error: \"Internal error\" });\n  }\n};\n", "import { DynamoDBClient } from \"@aws-sdk/client-dynamodb\";\nexport const client = new DynamoDBClient({ region: \"eu-north-1\" });\n", "export const sendResponse = (statusCode, body) => {\n  return {\n    statusCode,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Access-Control-Allow-Credentials\": true,\n    },\n    body: JSON.stringify(body),\n  };\n};\n"],
  "mappings": "AAAA,OAAS,eAAAA,EAAa,gBAAAC,MAAoB,2BCA1C,OAAS,kBAAAC,MAAsB,2BACxB,IAAMC,EAAS,IAAID,EAAe,CAAE,OAAQ,YAAa,CAAC,ECD1D,IAAME,EAAe,CAACC,EAAYC,KAChC,CACL,WAAAD,EACA,QAAS,CACP,eAAgB,mBAChB,8BAA+B,IAC/B,mCAAoC,EACtC,EACA,KAAM,KAAK,UAAUC,CAAI,CAC3B,GFLF,IAAMC,EAAWC,IAAQ,CACvB,GAAIA,EAAG,UAAU,EACjB,SAAUA,EAAG,SAAS,EACtB,KAAMA,EAAG,KAAK,EACd,UAAWA,EAAG,UAAU,CAC1B,GAEaC,EAAU,MAAOC,GAAU,CACtC,GAAI,CACF,IAAMC,EAAKD,EAAM,uBAAyB,CAAC,EACrCE,EAAWD,EAAG,SACdE,EAAOF,EAAG,MAAQ,OAExB,GAAIC,EAAU,CACZ,IAAME,EAAS,CACb,UAAW,QAAQ,IAAI,YAAc,eACrC,UAAW,cACX,uBAAwB,gBACxB,0BAA2B,CACzB,KAAM,CAAE,EAAGF,CAAS,CACtB,EACA,iBAAkBC,IAAS,KAC7B,EAEME,IADS,MAAMC,EAAO,KAAK,IAAIC,EAAaH,CAAM,CAAC,GACnC,OAAS,CAAC,GAAG,IAAIP,CAAO,EAC9C,OAAOW,EAAa,IAAKH,CAAK,CAChC,KAAO,CAML,IAAIA,IALW,MAAMC,EAAO,KAC1B,IAAIG,EAAY,CACd,UAAW,QAAQ,IAAI,YAAc,cACvC,CAAC,CACH,GACoB,OAAS,CAAC,GAAG,IAAIZ,CAAO,EAC5C,OAAAQ,EAAM,KAAK,CAACK,EAAGC,IAAMA,EAAE,UAAU,cAAcD,EAAE,SAAS,CAAC,EACvDP,IAAS,OAAOE,EAAM,QAAQ,EAC3BG,EAAa,IAAKH,CAAK,CAChC,CACF,OAASO,EAAK,CACZ,eAAQ,MAAM,qBAAsBA,CAAG,EAChCJ,EAAa,IAAK,CAAE,MAAO,gBAAiB,CAAC,CACtD,CACF",
  "names": ["ScanCommand", "QueryCommand", "DynamoDBClient", "client", "sendResponse", "statusCode", "body", "mapItem", "it", "handler", "event", "qp", "username", "sort", "params", "items", "client", "QueryCommand", "sendResponse", "ScanCommand", "a", "b", "err"]
}
