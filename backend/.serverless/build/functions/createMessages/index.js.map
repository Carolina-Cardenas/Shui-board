{
  "version": 3,
  "sources": ["../../../../functions/createMessages/index.mjs", "../../../../services/db.mjs", "../../../../utils/responses.mjs", "../../../../node_modules/nanoid/index.js", "../../../../node_modules/nanoid/url-alphabet/index.js"],
  "sourcesContent": ["import { PutItemCommand } from \"@aws-sdk/client-dynamodb\";\nimport { client } from \"../../services/db.mjs\";\nimport { sendResponse } from \"../../utils/responses.mjs\";\nimport { nanoid } from \"nanoid\";\n\nexport const handler = async (event) => {\n  try {\n    const body = JSON.parse(event.body || \"{}\");\n    const { username, text } = body;\n    if (!username || !text) {\n      return sendResponse(400, { error: \"username and text required\" });\n    }\n\n    const id = nanoid();\n    const createdAt = new Date().toISOString();\n\n    const Item = {\n      messageId: { S: id },\n      username: { S: username },\n      text: { S: text },\n      createdAt: { S: createdAt },\n    };\n\n    await client.send(\n      new PutItemCommand({\n        TableName: process.env.TABLE_NAME || \"ShuiMessages\",\n        Item,\n      })\n    );\n\n    return sendResponse(201, { id, username, text, createdAt });\n  } catch (err) {\n    console.error(\"createMessage error\", err);\n    return sendResponse(500, { error: \"Internal error\" });\n  }\n};\n", "import { DynamoDBClient } from \"@aws-sdk/client-dynamodb\";\nexport const client = new DynamoDBClient({ region: \"eu-north-1\" });\n", "export const sendResponse = (statusCode, body) => {\n  return {\n    statusCode,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Access-Control-Allow-Credentials\": true,\n    },\n    body: JSON.stringify(body),\n  };\n};\n", "import { webcrypto as crypto } from 'node:crypto'\nimport { urlAlphabet as scopedUrlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nconst POOL_SIZE_MULTIPLIER = 128\nlet pool, poolOffset\nfunction fillPool(bytes) {\n  if (!pool || pool.length < bytes) {\n    pool = Buffer.allocUnsafe(bytes * POOL_SIZE_MULTIPLIER)\n    crypto.getRandomValues(pool)\n    poolOffset = 0\n  } else if (poolOffset + bytes > pool.length) {\n    crypto.getRandomValues(pool)\n    poolOffset = 0\n  }\n  poolOffset += bytes\n}\nexport function random(bytes) {\n  fillPool((bytes |= 0))\n  return pool.subarray(poolOffset - bytes, poolOffset)\n}\nexport function customRandom(alphabet, defaultSize, getRandom) {\n  let mask = (2 << (31 - Math.clz32((alphabet.length - 1) | 1))) - 1\n  let step = Math.ceil((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    if (!size) return ''\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let i = step\n      while (i--) {\n        id += alphabet[bytes[i] & mask] || ''\n        if (id.length >= size) return id\n      }\n    }\n  }\n}\nexport function customAlphabet(alphabet, size = 21) {\n  return customRandom(alphabet, size, random)\n}\nexport function nanoid(size = 21) {\n  fillPool((size |= 0))\n  let id = ''\n  for (let i = poolOffset - size; i < poolOffset; i++) {\n    id += scopedUrlAlphabet[pool[i] & 63]\n  }\n  return id\n}\n", "export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n"],
  "mappings": "AAAA,OAAS,kBAAAA,MAAsB,2BCA/B,OAAS,kBAAAC,MAAsB,2BACxB,IAAMC,EAAS,IAAID,EAAe,CAAE,OAAQ,YAAa,CAAC,ECD1D,IAAME,EAAe,CAACC,EAAYC,KAChC,CACL,WAAAD,EACA,QAAS,CACP,eAAgB,mBAChB,8BAA+B,IAC/B,mCAAoC,EACtC,EACA,KAAM,KAAK,UAAUC,CAAI,CAC3B,GCTF,OAAS,aAAaC,MAAc,cCA7B,IAAMC,EACX,mEDEF,IAAMC,EAAuB,IACzBC,EAAMC,EACV,SAASC,EAASC,EAAO,CACnB,CAACH,GAAQA,EAAK,OAASG,GACzBH,EAAO,OAAO,YAAYG,EAAQJ,CAAoB,EACtDK,EAAO,gBAAgBJ,CAAI,EAC3BC,EAAa,GACJA,EAAaE,EAAQH,EAAK,SACnCI,EAAO,gBAAgBJ,CAAI,EAC3BC,EAAa,GAEfA,GAAcE,CAChB,CAwBO,SAASE,EAAOC,EAAO,GAAI,CAChCC,EAAUD,GAAQ,CAAE,EACpB,IAAIE,EAAK,GACT,QAASC,EAAIC,EAAaJ,EAAMG,EAAIC,EAAYD,IAC9CD,GAAMG,EAAkBC,EAAKH,CAAC,EAAI,EAAE,EAEtC,OAAOD,CACT,CHzCO,IAAMK,EAAU,MAAOC,GAAU,CACtC,GAAI,CACF,IAAMC,EAAO,KAAK,MAAMD,EAAM,MAAQ,IAAI,EACpC,CAAE,SAAAE,EAAU,KAAAC,CAAK,EAAIF,EAC3B,GAAI,CAACC,GAAY,CAACC,EAChB,OAAOC,EAAa,IAAK,CAAE,MAAO,4BAA6B,CAAC,EAGlE,IAAMC,EAAKC,EAAO,EACZC,EAAY,IAAI,KAAK,EAAE,YAAY,EAEnCC,EAAO,CACX,UAAW,CAAE,EAAGH,CAAG,EACnB,SAAU,CAAE,EAAGH,CAAS,EACxB,KAAM,CAAE,EAAGC,CAAK,EAChB,UAAW,CAAE,EAAGI,CAAU,CAC5B,EAEA,aAAME,EAAO,KACX,IAAIC,EAAe,CACjB,UAAW,QAAQ,IAAI,YAAc,eACrC,KAAAF,CACF,CAAC,CACH,EAEOJ,EAAa,IAAK,CAAE,GAAAC,EAAI,SAAAH,EAAU,KAAAC,EAAM,UAAAI,CAAU,CAAC,CAC5D,OAASI,EAAK,CACZ,eAAQ,MAAM,sBAAuBA,CAAG,EACjCP,EAAa,IAAK,CAAE,MAAO,gBAAiB,CAAC,CACtD,CACF",
  "names": ["PutItemCommand", "DynamoDBClient", "client", "sendResponse", "statusCode", "body", "crypto", "urlAlphabet", "POOL_SIZE_MULTIPLIER", "pool", "poolOffset", "fillPool", "bytes", "crypto", "nanoid", "size", "fillPool", "id", "i", "poolOffset", "urlAlphabet", "pool", "handler", "event", "body", "username", "text", "sendResponse", "id", "nanoid", "createdAt", "Item", "client", "PutItemCommand", "err"]
}
