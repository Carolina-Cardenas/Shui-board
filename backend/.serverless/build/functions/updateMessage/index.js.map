{
  "version": 3,
  "sources": ["../../../../functions/updateMessage/index.mjs", "../../../../services/db.mjs", "../../../../utils/responses.mjs"],
  "sourcesContent": ["import { GetItemCommand, UpdateItemCommand } from \"@aws-sdk/client-dynamodb\";\nimport { client } from \"../../services/db.mjs\";\nimport { sendResponse } from \"../../utils/responses.mjs\";\n\nexport const handler = async (event) => {\n  try {\n    const id = event.pathParameters && event.pathParameters.id;\n    if (!id) return sendResponse(400, { error: \"Missing id\" });\n\n    const body = JSON.parse(event.body || \"{}\");\n    const { text } = body;\n    if (!text) return sendResponse(400, { error: \"text required\" });\n\n    // Check exists\n    const get = await client.send(\n      new GetItemCommand({\n        TableName: process.env.TABLE_NAME || \"ShuiMessages\",\n        Key: { id: { S: id } },\n      })\n    );\n    if (!get.Item) return sendResponse(404, { error: \"Message not found\" });\n\n    const now = new Date().toISOString();\n    await client.send(\n      new UpdateItemCommand({\n        TableName: process.env.TABLE_NAME || \"ShuiMessages\",\n        Key: { id: { S: id } },\n        UpdateExpression: \"SET #t = :text, updatedAt = :u\",\n        ExpressionAttributeNames: { \"#t\": \"text\" },\n        ExpressionAttributeValues: {\n          \":text\": { S: text },\n          \":u\": { S: now },\n        },\n      })\n    );\n\n    return sendResponse(200, { id, text, updatedAt: now });\n  } catch (err) {\n    console.error(\"updateMessage error\", err);\n    return sendResponse(500, { error: \"Internal error\" });\n  }\n};\n", "import { DynamoDBClient } from \"@aws-sdk/client-dynamodb\";\nexport const client = new DynamoDBClient({ region: \"eu-north-1\" });\n", "export const sendResponse = (statusCode, body) => {\n  return {\n    statusCode,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Access-Control-Allow-Credentials\": true,\n    },\n    body: JSON.stringify(body),\n  };\n};\n"],
  "mappings": "AAAA,OAAS,kBAAAA,EAAgB,qBAAAC,MAAyB,2BCAlD,OAAS,kBAAAC,MAAsB,2BACxB,IAAMC,EAAS,IAAID,EAAe,CAAE,OAAQ,YAAa,CAAC,ECD1D,IAAME,EAAe,CAACC,EAAYC,KAChC,CACL,WAAAD,EACA,QAAS,CACP,eAAgB,mBAChB,8BAA+B,IAC/B,mCAAoC,EACtC,EACA,KAAM,KAAK,UAAUC,CAAI,CAC3B,GFLK,IAAMC,EAAU,MAAOC,GAAU,CACtC,GAAI,CACF,IAAMC,EAAKD,EAAM,gBAAkBA,EAAM,eAAe,GACxD,GAAI,CAACC,EAAI,OAAOC,EAAa,IAAK,CAAE,MAAO,YAAa,CAAC,EAEzD,IAAMC,EAAO,KAAK,MAAMH,EAAM,MAAQ,IAAI,EACpC,CAAE,KAAAI,CAAK,EAAID,EACjB,GAAI,CAACC,EAAM,OAAOF,EAAa,IAAK,CAAE,MAAO,eAAgB,CAAC,EAS9D,GAAI,EANQ,MAAMG,EAAO,KACvB,IAAIC,EAAe,CACjB,UAAW,QAAQ,IAAI,YAAc,eACrC,IAAK,CAAE,GAAI,CAAE,EAAGL,CAAG,CAAE,CACvB,CAAC,CACH,GACS,KAAM,OAAOC,EAAa,IAAK,CAAE,MAAO,mBAAoB,CAAC,EAEtE,IAAMK,EAAM,IAAI,KAAK,EAAE,YAAY,EACnC,aAAMF,EAAO,KACX,IAAIG,EAAkB,CACpB,UAAW,QAAQ,IAAI,YAAc,eACrC,IAAK,CAAE,GAAI,CAAE,EAAGP,CAAG,CAAE,EACrB,iBAAkB,iCAClB,yBAA0B,CAAE,KAAM,MAAO,EACzC,0BAA2B,CACzB,QAAS,CAAE,EAAGG,CAAK,EACnB,KAAM,CAAE,EAAGG,CAAI,CACjB,CACF,CAAC,CACH,EAEOL,EAAa,IAAK,CAAE,GAAAD,EAAI,KAAAG,EAAM,UAAWG,CAAI,CAAC,CACvD,OAASE,EAAK,CACZ,eAAQ,MAAM,sBAAuBA,CAAG,EACjCP,EAAa,IAAK,CAAE,MAAO,gBAAiB,CAAC,CACtD,CACF",
  "names": ["GetItemCommand", "UpdateItemCommand", "DynamoDBClient", "client", "sendResponse", "statusCode", "body", "handler", "event", "id", "sendResponse", "body", "text", "client", "GetItemCommand", "now", "UpdateItemCommand", "err"]
}
